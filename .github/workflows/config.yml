name: Deploy Production Team-Node ECS CI CD
on:
  push:
   branches:
    - main
env:
  AWS_REGION: ${{ secrets.AWS_REGION }}                
  ECR_REPOSITORY: frontend-repo
  ECS_SERVICE: frontend-service
  ECS_CLUSTER: CodingChallenege
  CONTAINER_NAME: frontend-contianer
jobs:
  deployement:
    name: Deploy
    runs-on: ubuntu-latest
    environment: developement
    steps:
    - name: Checkout
      uses: actions/checkout@v2     
    - name: Configure AWS credentials
      uses: aws-actions/configure-aws-credentials@v1
      with:
        aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
        aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        aws-region: ${{ secrets.AWS_REGION }}
    # DEPLOY TO ECR
    - name: Login to Amazon ECR
      id: login-ecr
      uses: aws-actions/amazon-ecr-login@v1
    - name: Build, tag, and push image to Amazon ECR
      id: build-image
      env:
       ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
       IMAGE_TAG: latest
      run: |
        docker build -t $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG .
        docker push $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG
        echo "$ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG"
        echo "::set-output name=image::$ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG"
# DEPLOY TO ECS USING TASK  DEFINITION
# DEPLOY TO ECS USING TASK  DEFINITION
    - name: Download task definition
      run: aws ecs describe-task-definition --task-definition frontend-td --query taskDefinition > frontend-td.json
    - name: Fill in the new image ID in the Amazon ECS task definition
      id: task-def
      uses: aws-actions/amazon-ecs-render-task-definition@v1
      with:
        task-definition: frontend-td.json
        container-name: ${{ env.CONTAINER_NAME }}
        image: ${{ steps.build-image.outputs.image }}
    - name: Deploy Amazon ECS task definition
      uses: aws-actions/amazon-ecs-deploy-task-definition@v1
      with:
        task-definition: ${{ steps.task-def.outputs.task-definition }}
        service: ${{ env.ECS_SERVICE }}
        cluster: ${{ env.ECS_CLUSTER }}
        wait-for-service-stability: true